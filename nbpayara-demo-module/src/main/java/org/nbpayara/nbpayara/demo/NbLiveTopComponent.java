/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.nbpayara.nbpayara.demo;

import java.awt.BorderLayout;
import java.awt.EventQueue;
import java.time.Instant;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.FormatStyle;
import java.util.stream.Collectors;
import javax.swing.JComponent;
import javax.swing.JEditorPane;
import javax.swing.text.BadLocationException;
import javax.swing.text.StyledDocument;
import org.nbpayara.demo.beans.Message;
import org.nbpayara.demo.beans.MessageEvent;
import org.nbpayara.demo.beans.MessagesBean;
import org.nbpayara.spi.JMSListener;
import org.nbpayara.spi.JMSTopicListenerServiceProvider;
import org.nbpayara.spi.RemoteLookup;
import org.netbeans.api.editor.mimelookup.MimeLookup;
import org.netbeans.api.settings.ConvertAsProperties;
import org.netbeans.editor.EditorUI;
import org.netbeans.editor.Utilities;
import org.netbeans.modules.editor.NbEditorKit;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@RemoteLookup.Registration(name = "java:global/nbpayara-web-demo/MessagesBeanRemote!org.nbpayara.demo.beans.MessagesBean", beanInterface = MessagesBean.class)
@ConvertAsProperties(
        dtd = "-//org.nbpayara.nbpayara.demo//NbLive//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "NbLiveTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "properties", openAtStartup = false)
@ActionID(category = "Window", id = "org.nbpayara.nbpayara.demo.NbLiveTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_NbLiveAction",
        preferredID = "NbLiveTopComponent"
)
@Messages({
    "CTL_NbLiveAction=NbLive",
    "CTL_NbLiveTopComponent=NbLive Window",
    "HINT_NbLiveTopComponent=This is a NbLive window"
})
public final class NbLiveTopComponent extends TopComponent {
    
    public static final String MIME = "text/nbpayara-demo";
    private final static DateTimeFormatter DATE_FORMAT = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM);
    private final JEditorPane pane;
    private final NbEditorKit kit;
    private final Listener jmsListener;
    
    @SuppressWarnings({"OverridableMethodCallInConstructor"})
    public NbLiveTopComponent() {
        super();
        jmsListener = new Listener();
        kit = MimeLookup.getLookup(MIME).lookup(NbEditorKit.class);
        pane = new JEditorPane();
        pane.setEditorKit(kit);
        kit.install(pane);
        EditorUI editorUI = Utilities.getEditorUI(pane);
        JComponent ec = editorUI.getExtComponent();
        initComponents();
        add(ec, BorderLayout.CENTER);
//        add(editorUI.getToolBarComponent(), BorderLayout.NORTH);
        setName(Bundle.CTL_NbLiveTopComponent());
        setToolTipText(Bundle.HINT_NbLiveTopComponent());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bottomPanel = new javax.swing.JPanel();
        newMassageTextFieldLabel = new javax.swing.JLabel();
        space = new javax.swing.Box.Filler(new java.awt.Dimension(3, 0), new java.awt.Dimension(4, 0), new java.awt.Dimension(3, 32767));
        newMessageTextField = new org.jdesktop.swingx.JXTextField();

        setLayout(new java.awt.BorderLayout());

        bottomPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2));
        bottomPanel.setLayout(new javax.swing.BoxLayout(bottomPanel, javax.swing.BoxLayout.LINE_AXIS));

        newMassageTextFieldLabel.setLabelFor(newMessageTextField);
        org.openide.awt.Mnemonics.setLocalizedText(newMassageTextFieldLabel, org.openide.util.NbBundle.getMessage(NbLiveTopComponent.class, "NbLiveTopComponent.newMassageTextFieldLabel.text")); // NOI18N
        bottomPanel.add(newMassageTextFieldLabel);
        bottomPanel.add(space);

        newMessageTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                postMessageAction(evt);
            }
        });
        bottomPanel.add(newMessageTextField);

        add(bottomPanel, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents

    private void postMessageAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_postMessageAction
        final String message = newMessageTextField.getText();
        RemoteLookup rl = RemoteLookup.get("demo");
        rl.getRequestProcessor().post(() -> {
            MessagesBean mb = rl.lookup(MessagesBean.class);
            Message msg = new Message(System.getProperty("user.name"), message, System.currentTimeMillis());
            mb.postMessage(msg);
        });
        newMessageTextField.setText(null);
    }//GEN-LAST:event_postMessageAction

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bottomPanel;
    private javax.swing.JLabel newMassageTextFieldLabel;
    private org.jdesktop.swingx.JXTextField newMessageTextField;
    private javax.swing.Box.Filler space;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        RemoteLookup.get("demo").getRequestProcessor()
                .post(this::initMessages);
        JMSTopicListenerServiceProvider.find(DemoDomain.INFO.getURL())
                .getListenerService(DemoJMSTopicListenerServiceProvider.MESSAGES_TOPIC)
                .registerListener(MessageEvent.class, jmsListener);
    }
    
    private void initMessages() {
        RemoteLookup rl = RemoteLookup.get(DemoDomain.INFO.getURL());
        MessagesBean mb = rl.lookup(MessagesBean.class);
        final StyledDocument d = (StyledDocument) kit.createDefaultDocument();
        final String text = mb.getMessages().stream()
                .map(this::messageToText)
                .collect(Collectors.joining("\n"));
        try {
            d.insertString(0, text, null);
        } catch (BadLocationException ex) {
        }
        mb.login(System.getProperty("user.name"));
        EventQueue.invokeLater(() -> pane.setDocument(d));
    }
    
    private String messageToText(Message msg) {
        long time = msg.getTime();
        ZonedDateTime zdt = ZonedDateTime.ofInstant(Instant.ofEpochMilli(time), ZoneId.systemDefault());
        String date = zdt.format(DATE_FORMAT);
        return msg.getUser() + ": " + msg.getText() + " [" + date + "]\n";
    }
    
    @Override
    public void componentClosed() {
        JMSTopicListenerServiceProvider.find(DemoDomain.INFO.getURL())
                .getListenerService(DemoJMSTopicListenerServiceProvider.MESSAGES_TOPIC)
                .unregisterListener(jmsListener);
        RemoteLookup rl = RemoteLookup.get(DemoDomain.INFO.getURL());
        MessagesBean mb = rl.lookup(MessagesBean.class);
        mb.disconnect(System.getProperty("user.name"));
    }
    
    void writeProperties(java.util.Properties p) {
        p.setProperty("version", "1.0");
    }
    
    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
    }
    
    private class Listener implements JMSListener<MessageEvent> {
        
        @Override
        public void onMessage(MessageEvent event) {
            RemoteLookup.get("demo").getRequestProcessor()
                    .post(NbLiveTopComponent.this::initMessages);
        }
        
    }
}
